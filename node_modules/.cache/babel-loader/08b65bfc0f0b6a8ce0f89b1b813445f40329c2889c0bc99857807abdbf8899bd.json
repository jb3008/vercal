{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInscription = exports.validateInscriptionPayload = void 0;\nconst jsontokens_1 = require(\"jsontokens\");\nconst provider_1 = require(\"../provider\");\nconst MAX_CONTENT_LENGTH_MAINNET = 400e3; // 400kb is the max miners will mine\nconst MAX_CONTENT_LENGTH_TESTNET = 60e3; // 60kb limit on Testnet to prevent spam\nconst validateInscriptionPayload = payload => {\n  const {\n    contentType,\n    content,\n    payloadType,\n    network,\n    appFeeAddress,\n    appFee\n  } = payload;\n  if (!/^[a-z]+\\/[a-z0-9\\-\\.\\+]+(?=;.*|$)/.test(contentType)) {\n    throw new Error('Invalid content type detected');\n  }\n  if (!content || content.length === 0) {\n    throw new Error('Empty content not allowed');\n  }\n  if (!payloadType || payloadType !== 'BASE_64' && payloadType !== 'PLAIN_TEXT') {\n    throw new Error('Empty invalid payloadType specified');\n  }\n  if (content.length > (network.type === 'Mainnet' ? MAX_CONTENT_LENGTH_MAINNET : MAX_CONTENT_LENGTH_TESTNET)) {\n    throw new Error('Content too large');\n  }\n  if ((appFeeAddress?.length ?? 0) > 0 && (appFee ?? 0) <= 0) {\n    throw new Error('Invalid combination of app fee address and fee provided');\n  }\n};\nexports.validateInscriptionPayload = validateInscriptionPayload;\nconst createInscription = async options => {\n  const {\n    getProvider\n  } = options;\n  const provider = await (0, provider_1.getProviderOrThrow)(getProvider);\n  (0, exports.validateInscriptionPayload)(options.payload);\n  try {\n    const request = (0, jsontokens_1.createUnsecuredToken)(options.payload);\n    const response = await provider.createInscription(request);\n    options.onFinish?.(response);\n  } catch (error) {\n    console.error('[Connect] Error during create inscription', error);\n    options.onCancel?.();\n  }\n};\nexports.createInscription = createInscription;","map":{"version":3,"names":["jsontokens_1","require","provider_1","MAX_CONTENT_LENGTH_MAINNET","MAX_CONTENT_LENGTH_TESTNET","validateInscriptionPayload","payload","contentType","content","payloadType","network","appFeeAddress","appFee","test","Error","length","type","exports","createInscription","options","getProvider","provider","getProviderOrThrow","request","createUnsecuredToken","response","onFinish","error","console","onCancel"],"sources":["../../src/inscriptions/createInscription.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,YAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AAGA,MAAME,0BAA0B,GAAG,KAAK,CAAC,CAAC;AAC1C,MAAMC,0BAA0B,GAAG,IAAI,CAAC,CAAC;AAElC,MAAMC,0BAA0B,GAAIC,OAAiC,IAAI;EAC9E,MAAM;IAAEC,WAAW;IAAEC,OAAO;IAAEC,WAAW;IAAEC,OAAO;IAAEC,aAAa;IAAEC;EAAM,CAAE,GAAGN,OAAO;EACrF,IAAI,CAAC,mCAAmC,CAACO,IAAI,CAACN,WAAW,CAAC,EAAE;IAC1D,MAAM,IAAIO,KAAK,CAAC,+BAA+B,CAAC;;EAGlD,IAAI,CAACN,OAAO,IAAIA,OAAO,CAACO,MAAM,KAAK,CAAC,EAAE;IACpC,MAAM,IAAID,KAAK,CAAC,2BAA2B,CAAC;;EAG9C,IAAI,CAACL,WAAW,IAAKA,WAAW,KAAK,SAAS,IAAIA,WAAW,KAAK,YAAa,EAAE;IAC/E,MAAM,IAAIK,KAAK,CAAC,qCAAqC,CAAC;;EAGxD,IACEN,OAAO,CAACO,MAAM,IACbL,OAAO,CAACM,IAAI,KAAK,SAAS,GAAGb,0BAA0B,GAAGC,0BAA0B,CAAC,EACtF;IACA,MAAM,IAAIU,KAAK,CAAC,mBAAmB,CAAC;;EAGtC,IAAI,CAACH,aAAa,EAAEI,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAACH,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE;IAC1D,MAAM,IAAIE,KAAK,CAAC,yDAAyD,CAAC;;AAE9E,CAAC;AAxBYG,OAAA,CAAAZ,0BAA0B,GAAAA,0BAAA;AA0BhC,MAAMa,iBAAiB,GAAG,MAAOC,OAAiC,IAAI;EAC3E,MAAM;IAAEC;EAAW,CAAE,GAAGD,OAAO;EAC/B,MAAME,QAAQ,GAAG,MAAM,IAAAnB,UAAA,CAAAoB,kBAAkB,EAACF,WAAW,CAAC;EAEtD,IAAAH,OAAA,CAAAZ,0BAA0B,EAACc,OAAO,CAACb,OAAO,CAAC;EAE3C,IAAI;IACF,MAAMiB,OAAO,GAAG,IAAAvB,YAAA,CAAAwB,oBAAoB,EAACL,OAAO,CAACb,OAA0B,CAAC;IACxE,MAAMmB,QAAQ,GAAG,MAAMJ,QAAQ,CAACH,iBAAiB,CAACK,OAAO,CAAC;IAC1DJ,OAAO,CAACO,QAAQ,GAAGD,QAAQ,CAAC;GAC7B,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjER,OAAO,CAACU,QAAQ,GAAE,CAAE;;AAExB,CAAC;AAdYZ,OAAA,CAAAC,iBAAiB,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}